#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Binary Search Tree structure
typedef struct BinarySearchTree {
int data[MAX_SIZE];
int size;
} BST;

// Function to create an empty Binary Search Tree
BST* createBST() {
BST* bst = (BST*)malloc(sizeof(BST));
bst->size = 0;
return bst;
}

// Function to check if the BST is empty
int isEmpty(BST* bst) {
return (bst->size == 0);
}

// Function to check if the BST is full
int isFull(BST* bst) {
return (bst->size == MAX_SIZE);
}

// Function to perform in-order traversal
void inOrderTraversal(BST* bst, int index) {
if (index < bst->size) {
inOrderTraversal(bst, 2 * index + 1);
printf("%d ", bst->data[index]);
inOrderTraversal(bst, 2 * index + 2);
}
}

// Function to perform pre-order traversal
void preOrderTraversal(BST* bst, int index) {
if (index < bst->size) {
printf("%d ", bst->data[index]);
preOrderTraversal(bst, 2 * index + 1);
preOrderTraversal(bst, 2 * index + 2);
}
}

// Function to perform post-order traversal
void postOrderTraversal(BST* bst, int index) {
if (index < bst->size) {
postOrderTraversal(bst, 2 * index + 1);
postOrderTraversal(bst, 2 * index + 2);
printf("%d ", bst->data[index]);
}
}

// Function to search for a key in the BST
int search(BST* bst, int key) {
int index = 0;
while (index < bst->size) {
if (bst->data[index] == key) {
return 1; // Key found
} else if (key < bst->data[index]) {
index = 2 * index + 1; // Go to the left subtree
} else {
index = 2 * index + 2; // Go to the right subtree
}
}
return 0; // Key not found
}

// Function to insert a key into the BST
void insert(BST* bst, int key) {
if (isFull(bst)) {
printf("Error: Binary Search Tree is full.\n");
return;
}

int index = 0;
while (1) {
    if (index >= bst->size) {
        bst->data[index] = key; // Insert the key
        bst->size++;
        return;
    } else if (key < bst->data[index]) {
        index = 2 * index + 1; // Go to the left subtree
    } else {
        index = 2 * index + 2; // Go to the right subtree
    }
}
}

// Function to delete a key from the BST
void delete(BST* bst, int key) {
if (isEmpty(bst)) {
printf("Error: Binary Search Tree is empty.\n");
return;
}

int index = 0;
while (index < bst->size) {
    if (bst->data[index] == key) {
        // Shift all elements to the left
        int i;
        for (i = index; i < bst->size - 1; i++) {
            bst->data[i] = bst->data[i + 1];
        }
        bst->size--;
        printf("Key %d has been deleted from the Binary Search Tree.\n", key);
        return;
    } else if (key < bst->data[index]) {
        index = 2 * index + 1; // Go to the left subtree
    } else {
        index = 2 * index + 2; // Go to the right subtree
    }
}
printf("Error: Key %d not found in the Binary Search Tree.\n", key);
}

int main() {
BST* bst = createBST();

int choice, key;
while (1) {
    printf("\nBinary Search Tree Operations:\n");
    printf("1. Insert a key\n");
    printf("2. Delete a key\n");
    printf("3. In-order traversal\n");
    printf("4. Pre-order traversal\n");
    printf("5. Post-order traversal\n");
    printf("6. Search a key\n");
    printf("7. Exit\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            printf("Enter key to insert: ");
            scanf("%d", &key);
            insert(bst, key);
            break;
        case 2:
            printf("Enter key to delete: ");
            scanf("%d", &key);
            delete(bst, key);
            break;
        case 3:
            printf("In-order traversal: ");
            inOrderTraversal(bst, 0);
            printf("\n");
            break;
        case 4:
            printf("Pre-order traversal: ");
            preOrderTraversal(bst, 0);
            printf("\n");
            break;
        case 5:
            printf("Post-order traversal: ");
            postOrderTraversal(bst, 0);
            printf("\n");
            break;
        case 6:
            printf("Enter key to search: ");
            scanf("%d", &key);
            if (search(bst, key)) {
                printf("Key %d is found in the Binary Search Tree.\n", key);
            } else {
                printf("Key %d is not found in the Binary Search Tree.\n", key);
            }
            break;
        case 7:
            printf("Exiting...\n");
            exit(0);
        default:
            printf("Invalid choice. Please try again.\n");
    }
}

return 0;
}
